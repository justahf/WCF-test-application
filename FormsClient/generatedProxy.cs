//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.19408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITestService")]
public interface ITestService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SearchName", ReplyAction="http://tempuri.org/ITestService/SearchNameResponse")]
    string SearchName(int phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SearchName", ReplyAction="http://tempuri.org/ITestService/SearchNameResponse")]
    System.Threading.Tasks.Task<string> SearchNameAsync(int phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SearchPhone", ReplyAction="http://tempuri.org/ITestService/SearchPhoneResponse")]
    int[] SearchPhone(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SearchPhone", ReplyAction="http://tempuri.org/ITestService/SearchPhoneResponse")]
    System.Threading.Tasks.Task<int[]> SearchPhoneAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllContacts", ReplyAction="http://tempuri.org/ITestService/GetAllContactsResponse")]
    string[][] GetAllContacts();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllContacts", ReplyAction="http://tempuri.org/ITestService/GetAllContactsResponse")]
    System.Threading.Tasks.Task<string[][]> GetAllContactsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/PushContact", ReplyAction="http://tempuri.org/ITestService/PushContactResponse")]
    int PushContact(string name, int phonenumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/PushContact", ReplyAction="http://tempuri.org/ITestService/PushContactResponse")]
    System.Threading.Tasks.Task<int> PushContactAsync(string name, int phonenumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ModifyContact", ReplyAction="http://tempuri.org/ITestService/ModifyContactResponse")]
    int ModifyContact(int phonenumber, int newnumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ModifyContact", ReplyAction="http://tempuri.org/ITestService/ModifyContactResponse")]
    System.Threading.Tasks.Task<int> ModifyContactAsync(int phonenumber, int newnumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/DeleteContact", ReplyAction="http://tempuri.org/ITestService/DeleteContactResponse")]
    int DeleteContact(int phonenumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/DeleteContact", ReplyAction="http://tempuri.org/ITestService/DeleteContactResponse")]
    System.Threading.Tasks.Task<int> DeleteContactAsync(int phonenumber);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITestServiceChannel : ITestService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestServiceClient : System.ServiceModel.ClientBase<ITestService>, ITestService
{
    
    public TestServiceClient()
    {
    }
    
    public TestServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string SearchName(int phone)
    {
        return base.Channel.SearchName(phone);
    }
    
    public System.Threading.Tasks.Task<string> SearchNameAsync(int phone)
    {
        return base.Channel.SearchNameAsync(phone);
    }
    
    public int[] SearchPhone(string name)
    {
        return base.Channel.SearchPhone(name);
    }
    
    public System.Threading.Tasks.Task<int[]> SearchPhoneAsync(string name)
    {
        return base.Channel.SearchPhoneAsync(name);
    }
    
    public string[][] GetAllContacts()
    {
        return base.Channel.GetAllContacts();
    }
    
    public System.Threading.Tasks.Task<string[][]> GetAllContactsAsync()
    {
        return base.Channel.GetAllContactsAsync();
    }
    
    public int PushContact(string name, int phonenumber)
    {
        return base.Channel.PushContact(name, phonenumber);
    }
    
    public System.Threading.Tasks.Task<int> PushContactAsync(string name, int phonenumber)
    {
        return base.Channel.PushContactAsync(name, phonenumber);
    }
    
    public int ModifyContact(int phonenumber, int newnumber)
    {
        return base.Channel.ModifyContact(phonenumber, newnumber);
    }
    
    public System.Threading.Tasks.Task<int> ModifyContactAsync(int phonenumber, int newnumber)
    {
        return base.Channel.ModifyContactAsync(phonenumber, newnumber);
    }
    
    public int DeleteContact(int phonenumber)
    {
        return base.Channel.DeleteContact(phonenumber);
    }
    
    public System.Threading.Tasks.Task<int> DeleteContactAsync(int phonenumber)
    {
        return base.Channel.DeleteContactAsync(phonenumber);
    }
}
